#lang racket

(require (planet "sicp.ss" ("soegaard" "sicp.plt" 2 1)))

(define wave
  (segments->painter
   (list (make-segment (make-vect 0.2 0.0) (make-vect 0.4 0.4))
         (make-segment (make-vect 0.4 0.4) (make-vect 0.3 0.5))
         (make-segment (make-vect 0.3 0.5) (make-vect 0.1 0.3))
         (make-segment (make-vect 0.1 0.3) (make-vect 0.0 0.6))
         (make-segment (make-vect 0.0 0.8) (make-vect 0.1 0.5))
         (make-segment (make-vect 0.1 0.5) (make-vect 0.3 0.6))
         (make-segment (make-vect 0.3 0.6) (make-vect 0.4 0.6))
         (make-segment (make-vect 0.4 0.6) (make-vect 0.3 0.8))
         (make-segment (make-vect 0.3 0.8) (make-vect 0.4 1.0))
         (make-segment (make-vect 0.6 1.0) (make-vect 0.7 0.8))
         (make-segment (make-vect 0.7 0.8) (make-vect 0.6 0.6))
         (make-segment (make-vect 0.6 0.6) (make-vect 0.8 0.6))
         (make-segment (make-vect 0.8 0.6) (make-vect 1.0 0.4))
         (make-segment (make-vect 1.0 0.2) (make-vect 0.6 0.4))
         (make-segment (make-vect 0.6 0.4) (make-vect 0.8 0.0))
         (make-segment (make-vect 0.7 0.0) (make-vect 0.5 0.3))
         (make-segment (make-vect 0.5 0.3) (make-vect 0.3 0.0)))))

(define wave2 (beside wave (flip-vert wave)))

(define (flipped-pairs painter)
  (let ([painter2 (beside painter (flip-vert painter))])
    (below painter2 painter2)))

(define wave4 (flipped-pairs wave))

(define (right-split painter n)
  (if (= n 0)
      painter
      (let ((smaller (right-split painter (- n 1))))
        (beside painter (below smaller smaller)))))

(define (up-split painter n)
  (if (= n 0)
      painter
      (let ((smaller (up-split painter (- n 1))))
        (below painter (beside smaller smaller)))))

(define (corner-split painter n)
  (if (= n 0)
      painter
      (let ((up (up-split painter (- n 1)))
            (right (right-split painter (- n 1))))
        (let ((top-left (beside up up))
              (bottom-right (below right right))
              (corner (corner-split painter (- n 1))))
          (beside (below painter top-left)
                  (below bottom-right corner))))))

(define (square-limit painter n)
  (let ((quarter (corner-split painter n)))
    (let ((half (beside (flip-horiz quarter) quarter)))
      (below (flip-vert half) half))))

(define (square-of-four tl tr bl br)
  (lambda (painter)
    (let ((top (beside (tl painter) (tr painter)))
          (bottom (beside (bl painter) (br painter))))
      (below bottom top))))

(define (flipped-pairs-2 painter)
  (let ((combine4 (square-of-four identity flip-vert identity flip-vert)))
    (combine4 painter)))

(define (square-limit-2 painter n)
  (let ((combine4 (square-of-four flip-horiz identity rotate180 flip-vert)))
    (combine4 (corner-split painter n))))

;; (define (split f g)
;;   (define (loop painter n)
;;     (if (= n 0)
;;         painter
;;         (let ((smaller (loop painter (- n 1))))
;;           (f painter (g smaller smaller)))))
;;   loop)

;; ex 2.45

(define (split f g)
  (lambda [painter n]
    (let loop ([painter painter] [n n])
      (if (= n 0)
          painter
          (let ((smaller (loop painter (- n 1))))
            (f painter (g smaller smaller)))))))

(define right-split-new (split beside below))
(define up-split-new (split below beside))

;; 枠

;; (define (frame-coord-map frame)
;;   (lambda (v)
;;     (add-vect (origin-frame frame)
;;               (add-vect (scale-vect (xcor-vect v) (edge1-frame frame))
;;                         (scale-vect (ycor-vect v) (edge2-frame frame))))))

;; ex 2.46

(define (make-vect2 x y)
  (cons x y))

(define (xcor-vect2 vect)
  (car vect))

(define (ycor-vect2 vect)
  (cdr vect))

(define (add-vect2 v1 v2)
  (make-vect2 (+ (xcor-vect2 v1) (xcor-vect2 v2))
              (+ (ycor-vect2 v1) (ycor-vect2 v2))))

(define (sub-vect2 v1 v2)
  (make-vect2 (- (xcor-vect2 v1) (xcor-vect2 v2))
              (- (ycor-vect2 v1) (ycor-vect2 v2))))

(define (scale-vect2 t v)
  (make-vect2 (* t (xcor-vect2 v))
              (* t (ycor-vect2 v))))


(require rackunit)

(check-equal? (make-vect2 2 3)
              '(2 . 3))

(check-equal? (xcor-vect2 (make-vect2 2 3))
              2)

(check-equal? (ycor-vect2 (make-vect2 2 3))
              3)

(check-equal? (add-vect2 (make-vect2 3.0 4.0)
                         (make-vect2 1.0 2.0))
              '(4.0 . 6.0))

(check-equal? (sub-vect2 (make-vect2 3.0 4.0)
                         (make-vect2 1.0 2.0))
              '(2.0 . 2.0))

(check-equal? (scale-vect2 3.0 (make-vect2 1.0 2.0))
              '(3.0 . 6.0))

(check-equal?
 (add-vect2 (make-vect2 2 3) (make-vect2 3 4))
 (make-vect2 5 7))

(check-equal?
 (sub-vect2 (make-vect2 2 3) (make-vect2 3 4))
 (make-vect2 -1 -1))

(check-equal?
 (scale-vect2 2 (make-vect2 3 4))
 (make-vect2 6 8))

;; ex 2.47

(define (make-frame2 origin edge1 edge2)
  (list origin edge1 edge2))

(define (origin-frame2 frame)
  (first frame))

(define (edge1-frame2 frame)
  (second frame))

(define (edge2-frame2 frame)
  (third frame))

(let ((frame (make-frame2 (make-vect2 0.0 0.0)
                          (make-vect2 2.0 0.0)
                          (make-vect2 0.0 2.0))))
  (check-equal?
   (origin-frame2 frame)
   (make-vect2 0.0 0.0))

  (check-equal?
   (edge1-frame2 frame)
   (make-vect2 2.0 0.0))

  (check-equal?
   (edge2-frame2 frame)
   (make-vect2 0.0 2.0)))

(define (make-frame3 origin edge1 edge2)
  (cons origin (cons edge1 edge2)))

(define (origin-frame3 frame)
  (car frame))

(define (edge1-frame3 frame)
  (cadr frame))

(define (edge2-frame3 frame)
  (cddr frame))

(let ((frame (make-frame3 (make-vect2 0.0 0.0)
                          (make-vect2 2.0 0.0)
                          (make-vect2 0.0 2.0))))
  (check-equal?
   (origin-frame3 frame)
   (make-vect2 0.0 0.0))

  (check-equal?
   (edge1-frame3 frame)
   (make-vect2 2.0 0.0))

  (check-equal?
   (edge2-frame3 frame)
   (make-vect2 0.0 2.0)))

;; (define (segments->painter segment-list)
;;   (lambda (frame)
;;     (for-each (lambda (segment)
;;                 (draw-line ((frame-coord-map frame) (start-segment segment))
;;                            ((frame-coord-map frame) (end-segment segment))))
;;               segment-list)))
;;

(define (make-segment2 start end)
  (cons start end))

(define (start-segment2 seg)
  (car seg))

(define (end-segment2 seg)
  (cdr seg))

;; 2.49

(define (2-49-a tl tr bl br)
  (segments->painter
   (list (make-segment2 tl tr)
         (make-segment2 tr br)
         (make-segment2 br bl)
         (make-segment2 bl tl))))

(define a (2-49-a (make-vect2 0.05 0.95)
                  (make-vect2 0.95 0.95)
                  (make-vect2 0.05 0.05)
                  (make-vect2 0.95 0.05)))
;; (paint a)

(define (2-49-b tl br tr bl)
  (segments->painter
   (list (make-segment2 tl br)
         (make-segment2 tr bl))))

(define b (2-49-b (make-vect2 0.01 0.99)
                  (make-vect2 0.99 0.01)
                  (make-vect2 0.99 0.99)
                  (make-vect2 0.01 0.01)))
;; (paint-hires b)

(define (center-vect v1 v2)
  (make-vect2 (/ (+ (xcor-vect2 v1)
                    (xcor-vect2 v2))
                 2.0)
              (/ (+ (ycor-vect2 v1)
                    (ycor-vect2 v2))
                 2.0)))

(check-equal?
 (center-vect (make-vect2 0.01 0.99)
              (make-vect2 0.01 0.01))
 '(0.01 . 0.5))

(check-equal?
 (center-vect (make-vect2 0.01 0.5)
              (make-vect2 0.99 0.5))
 '(0.5 . 0.5))

(define (2-49-c tl tr bl br)
  (let ([l (center-vect tl bl)]
        [t (center-vect tl tr)]
        [r (center-vect tr br)]
        [b (center-vect bl br)])
    (segments->painter
     (list (make-segment2 l t)
           (make-segment2 t r)
           (make-segment2 r b)
           (make-segment2 b l)))))

(define c (2-49-c (make-vect2 0.05 0.95)
                  (make-vect2 0.95 0.95)
                  (make-vect2 0.05 0.05)
                  (make-vect2 0.95 0.05)))

;; (paint-hires c)


(define wave-me
  (segments->painter
   (list (make-segment2 (make-vect2 0.2 0.0) (make-vect2 0.4 0.4))
         (make-segment2 (make-vect2 0.4 0.4) (make-vect2 0.3 0.5))
         (make-segment2 (make-vect2 0.3 0.5) (make-vect2 0.1 0.3))
         (make-segment2 (make-vect2 0.1 0.3) (make-vect2 0.0 0.6))
         (make-segment2 (make-vect2 0.0 0.8) (make-vect2 0.1 0.5))
         (make-segment2 (make-vect2 0.1 0.5) (make-vect2 0.3 0.6))
         (make-segment2 (make-vect2 0.3 0.6) (make-vect2 0.4 0.6))
         (make-segment2 (make-vect2 0.4 0.6) (make-vect2 0.3 0.8))
         (make-segment2 (make-vect2 0.3 0.8) (make-vect2 0.4 1.0))
         (make-segment2 (make-vect2 0.6 1.0) (make-vect2 0.7 0.8))
         (make-segment2 (make-vect2 0.7 0.8) (make-vect2 0.6 0.6))
         (make-segment2 (make-vect2 0.6 0.6) (make-vect2 0.8 0.6))
         (make-segment2 (make-vect2 0.8 0.6) (make-vect2 1.0 0.4))
         (make-segment2 (make-vect2 1.0 0.2) (make-vect2 0.6 0.4))
         (make-segment2 (make-vect2 0.6 0.4) (make-vect2 0.8 0.0))
         (make-segment2 (make-vect2 0.7 0.0) (make-vect2 0.5 0.3))
         (make-segment2 (make-vect2 0.5 0.3) (make-vect2 0.3 0.0)))))


(define (transform-painter2 painter origin corner1 corner2)
  (lambda (frame)
    (let ((m (frame-coord-map frame)))
      (let ((new-origin (m origin)))
        (painter (make-frame new-origin
                             (sub-vect2 (m corner1) new-origin)
                             (sub-vect2 (m corner2) new-origin)))))))

(define (flip-vert2 painter)
  (transform-painter2 painter
                      (make-vect2 0.0 1.0) ; new origin
                      (make-vect2 1.0 1.0) ; new end of edge1
                      (make-vect2 0.0 0.0))) ; new end of edge2

(define (shrink-to-upper-right painter)
  (transform-painter2 painter
                      (make-vect2 0.5 0.5)
                      (make-vect2 1.0 0.5)
                      (make-vect2 0.5 1.0)))

(define (rotate90 painter)
  (transform-painter2 painter
                      (make-vect2 1.0 0.0)
                      (make-vect2 1.0 1.0)
                      (make-vect2 0.0 0.0)))

(define (squash-inwards painter)
  (transform-painter2 painter
                      (make-vect2 0.0 0.0)
                      (make-vect2 0.65 0.35)
                      (make-vect2 0.35 0.65)))

(define (beside2 painter1 painter2)
  (let ((split-point (make-vect2 0.5 0.0)))
    (let ((paint-left (transform-painter2 painter1
                                          (make-vect2 0.0 0.0)
                                          split-point
                                          (make-vect2 0.0 1.0)))
          (paint-right (transform-painter2 painter2
                                           split-point
                                           (make-vect2 1.0 0.0)
                                           (make-vect2 0.5 1.0))))
      (lambda (frame)
        (paint-left frame)
        (paint-right frame)))))

;; ex 2.50

(define (flip-horiz2 painter)
  (transform-painter2 painter
                      (make-vect2 1.0 0.0)
                      (make-vect2 0.0 0.0)
                      (make-vect2 1.0 1.0)))

;; (define (rotate180 painter)
;;   (rotate90 (rotate90 painter)))

(define (rotate180-2 painter)
  (transform-painter2 painter
                      (make-vect2 1.0 1.0)
                      (make-vect2 0.0 1.0)
                      (make-vect2 1.0 0.0)))

(define (rotate270-2 painter)
  (transform-painter2 painter
                      (make-vect2 0.0 1.0)
                      (make-vect2 0.0 0.0)
                      (make-vect2 1.0 1.0)))

;; ex 2.51

(define (below2-1 p1 p2)
  (let* ((split-point (make-vect2 0.0 0.5))
         (paint-top (transform-painter2 p2
                                        (make-vect2 0.0 0.0)
                                        (make-vect2 1.0 0.0)
                                        split-point))
         (paint-bottom (transform-painter2 p1
                                           split-point
                                           (make-vect2 1.0 0.5)
                                           (make-vect2 0.0 1.0))))
    (lambda (frame)
      (paint-top frame)
      (paint-bottom frame))))

(define (below2-2 p1 p2)
  (rotate270 (beside2 (rotate90 p1) (rotate90 p2))))

;; ex 2.52
;; http://d.hatena.ne.jp/tetsu_miyagawa/20130512/1368350808

(define w1 (make-vect 0.00 0.83))
(define w2 (make-vect 0.20 0.70))
(define w3 (make-vect 0.35 0.80))
(define w4 (make-vect 0.45 0.80))
(define w5 (make-vect 0.38 0.88))
(define w6 (make-vect 0.40 1.00))
(define w7 (make-vect 0.60 1.00))
(define w8 (make-vect 0.62 0.88))
(define w9 (make-vect 0.58 0.80))
(define w10 (make-vect 0.75 0.80))
(define w11 (make-vect 1.00 0.48))
(define w12 (make-vect 1.00 0.45))
(define w13 (make-vect 0.70 0.68))
(define w14 (make-vect 0.82 0.00))
(define w15 (make-vect 0.72 0.00))
(define w16 (make-vect 0.57 0.30))
(define w17 (make-vect 0.40 0.00))
(define w18 (make-vect 0.28 0.00))
(define w19 (make-vect 0.42 0.42))
(define w20 (make-vect 0.35 0.70))
(define w21 (make-vect 0.22 0.58))
(define w22 (make-vect 0.00 0.78))
(define wave-smile
  (segments->painter 
   (list (make-segment w1 w2)
         (make-segment w2 w3)
         (make-segment w3 w4)
         (make-segment w4 w5)
         (make-segment w5 w6)
         (make-segment w7 w8)
         (make-segment w8 w9)
         (make-segment w9 w10)
         (make-segment w10 w11)
         (make-segment w12 w13)
         (make-segment w13 w14)
         (make-segment w15 w16)
         (make-segment w16 w17)
         (make-segment w18 w19)
         (make-segment w19 w20)
         (make-segment w20 w21)
         (make-segment w21 w22)
         (make-segment (make-vect 0.42 0.92) (make-vect 0.44 0.92))
         (make-segment (make-vect 0.50 0.92) (make-vect 0.52 0.92))
         (make-segment (make-vect 0.46 0.87) (make-vect 0.50 0.87))
         (make-segment (make-vect 0.46 0.87) (make-vect 0.49 0.83))
         (make-segment (make-vect 0.50 0.87) (make-vect 0.49 0.83)))))


(define (corner-split3 painter n)
  (if (= n 0)
      painter
      (let ((up (up-split-new painter (- n 1)))
            (right (right-split-new painter (- n 1))))
        (let ((top-left (beside2 up up))
              (bottom-right (below2-1 right right))
              (corner (corner-split3 painter (- n 1))))
          (beside (below painter top-left)
                  (below bottom-right corner))))))
