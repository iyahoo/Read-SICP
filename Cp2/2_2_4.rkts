#lang racket

(require (planet "sicp.ss" ("soegaard" "sicp.plt" 2 1)))

(define wave
  (segments->painter
   (list (make-segment (make-vect 0.2 0.0) (make-vect 0.4 0.4))
         (make-segment (make-vect 0.4 0.4) (make-vect 0.3 0.5))
         (make-segment (make-vect 0.3 0.5) (make-vect 0.1 0.3))
         (make-segment (make-vect 0.1 0.3) (make-vect 0.0 0.6))
         (make-segment (make-vect 0.0 0.8) (make-vect 0.1 0.5))
         (make-segment (make-vect 0.1 0.5) (make-vect 0.3 0.6))
         (make-segment (make-vect 0.3 0.6) (make-vect 0.4 0.6))
         (make-segment (make-vect 0.4 0.6) (make-vect 0.3 0.8))
         (make-segment (make-vect 0.3 0.8) (make-vect 0.4 1.0))
         (make-segment (make-vect 0.6 1.0) (make-vect 0.7 0.8))
         (make-segment (make-vect 0.7 0.8) (make-vect 0.6 0.6))
         (make-segment (make-vect 0.6 0.6) (make-vect 0.8 0.6))
         (make-segment (make-vect 0.8 0.6) (make-vect 1.0 0.4))
         (make-segment (make-vect 1.0 0.2) (make-vect 0.6 0.4))
         (make-segment (make-vect 0.6 0.4) (make-vect 0.8 0.0))
         (make-segment (make-vect 0.7 0.0) (make-vect 0.5 0.3))
         (make-segment (make-vect 0.5 0.3) (make-vect 0.3 0.0)))))

(define wave2 (beside wave (flip-vert wave)))

(define (flipped-pairs painter)
  (let ([painter2 (beside painter (flip-vert painter))])
    (below painter2 painter2)))

(define wave4 (flipped-pairs wave))


(define (right-split painter n)
  (if (= n 0)
      painter
      (let ((smaller (right-split painter (- n 1))))
        (beside painter (below smaller smaller)))))

(define (up-split painter n)
  (if (= n 0)
      painter
      (let ((smaller (up-split painter (- n 1))))
        (below painter (beside smaller smaller)))))

(define (corner-split painter n)
  (if (= n 0)
      painter
      (let ((up (up-split painter (- n 1)))
            (right (right-split painter (- n 1))))
        (let ((top-left (beside up up))
              (bottom-right (below right right))
              (corner (corner-split painter (- n 1))))
          (beside (below painter top-left)
                  (below bottom-right corner))))))

(define (square-limit painter n)
  (let ((quarter (corner-split painter n)))
    (let ((half (beside (flip-horiz quarter) quarter)))
      (below (flip-vert half) half))))

(define (square-of-four tl tr bl br)
  (lambda (painter)
    (let ((top (beside (tl painter) (tr painter)))
          (bottom (beside (bl painter) (br painter))))
      (below bottom top))))

(define (flipped-pairs-2 painter)
  (let ((combine4 (square-of-four identity flip-vert identity flip-vert)))
    (combine4 painter)))

(define (square-limit-2 painter n)
  (let ((combine4 (square-of-four flip-horiz identity rotate180 flip-vert)))
    (combine4 (corner-split painter n))))

;; (define (split f g)
;;   (define (loop painter n)
;;     (if (= n 0)
;;         painter
;;         (let ((smaller (loop painter (- n 1))))
;;           (f painter (g smaller smaller)))))
;;   loop)

;; ex 2.45

(define (split f g)
  (lambda [painter n]
    (let loop ([painter painter] [n n])
      (if (= n 0)
          painter
          (let ((smaller (loop painter (- n 1))))
            (f painter (g smaller smaller)))))))

(define right-split-new (split beside below))
(define up-split-new (split below beside))

;; 枠

;; (define (frame-coord-map frame)
;;   (lambda (v)
;;     (add-vect (origin-frame frame)
;;               (add-vect (scale-vect (xcor-vect v) (edge1-frame frame))
;;                         (scale-vect (ycor-vect v) (edge2-frame frame))))))

;; ex 2.46

(define (make-vect2 x y)
  (cons x y))

(define (xcor-vect2 vect)
  (car vect))

(define (ycor-vect2 vect)
  (cdr vect))

(define (add-vect v1 v2)
  (make-vect2 (+ (xcor-vect2 v1) (xcor-vect2 v2))
              (+ (ycor-vect2 v1) (ycor-vect2 v2))))

(define (sub-vect v1 v2)
  (make-vect2 (- (xcor-vect2 v1) (xcor-vect2 v2))
              (- (ycor-vect2 v1) (ycor-vect2 v2))))

(define (scale-vect t v)
  (make-vect2 (* t (xcor-vect2 v))
              (* t (ycor-vect2 v))))

